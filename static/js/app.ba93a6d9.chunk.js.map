{"version":3,"sources":["app/components/TextBlock.tsx","app/components/SourceLink.tsx","app/components/ScreenHeader.tsx","app/components/Button.tsx","app/components/Keyboard.tsx","app/GameScreen.tsx","app/gameUtils.ts","app/constants/gameConstants.ts","App.tsx"],"names":["TextBlockState","HOME_URL","styles","StyleSheet","create","container","position","right","top","subtitle","color","fontWeight","fontSize","SourceLink","View","style","Text","accessibilityRole","href","onPress","Platform","OS","Linking","openURL","undefined","paddingVertical","alignItems","justifyContent","title","ScreenHeader","button","paddingHorizontal","borderWidth","borderRadius","borderColor","cta","active","elevation","Button","props","useState","isPressedIn","setIsPressedIn","Pressable","onPressIn","onPressOut","keySequence","row","flexDirection","marginBottom","cell","padding","margin","cellDisabled","text","textDisabled","Keyboard","onKeyPress","disabledKeyList","map","rowIndex","key","isDisabled","includes","disabled","ColorMap","GUESS","CORRECT","POSSIBLE","INCORRECT","width","height","TextBlock","state","backgroundColor","toUpperCase","BOARD_TEMPLATE","board","i","push","Array","fill","getInitialBoard","mb12","mh2","marginHorizontal","fg1","flexGrow","textWhite","bottomContainer","score","buttonRow","buttonSpacer","GameScreen","guessList","setGuessList","inputWord","setInputWord","gameOver","setGameOver","disabledLetters","setDisabledLetters","wordToGuess","useRef","useEffect","current","len","fiveLetterWords","length","randomIndex","Math","floor","random","getRandomWord","guessLen","list","forEach","word","split","letter","console","log","useCallback","prev","slice","wordleEmoji","useMemo","output","line","char","colIndex","getWordleEmoji","_","guessLetter","letterToShow","selectable","Clipboard","setString","App","SafeAreaView","flex"],"mappings":"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","file":"static/js/app.ba93a6d9.chunk.js","sourcesContent":["import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nexport enum TextBlockState {\n  GUESS = 'guess',\n  CORRECT = 'correct',\n  POSSIBLE = 'possible',\n  INCORRECT = 'incorrect',\n}\n\nconst ColorMap: Record<TextBlockState, string> = {\n  [TextBlockState.GUESS]: 'transparent',\n  [TextBlockState.CORRECT]: '#76b041',\n  [TextBlockState.POSSIBLE]: '#FFC914',\n  [TextBlockState.INCORRECT]: '#8b939c',\n};\n\ninterface TextBlockProps {\n  text: string;\n  state: TextBlockState;\n}\n\nconst TextBlock = (props: TextBlockProps) => {\n  const {text, state} = props;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: ColorMap[state],\n        },\n      ]}>\n      <Text style={styles.text}>{text.toUpperCase()}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 40,\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n\nexport default TextBlock;\n","import React from 'react';\nimport {Linking, Platform, StyleSheet, Text, View} from 'react-native';\n\nconst HOME_URL = 'https://github.com/LonelyCpp/react-native-wordle';\n\nconst SourceLink = () => {\n  return (\n    <View style={styles.container}>\n      <Text\n        style={styles.subtitle}\n        accessibilityRole=\"link\"\n        // @ts-ignore (web only prop)\n        href={HOME_URL}\n        onPress={\n          Platform.OS !== 'web' ? () => Linking.openURL(HOME_URL) : undefined\n        }>\n        (github)\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    right: 12,\n    top: 16,\n  },\n  subtitle: {\n    color: '#5998c5',\n    fontWeight: '400',\n    fontSize: 16,\n  },\n});\n\nexport default SourceLink;\n","import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst ScreenHeader = () => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Wordle</Text>\n      <Text style={styles.subtitle}>react native</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    color: '#df928e',\n    fontWeight: '200',\n    fontSize: 32,\n  },\n  subtitle: {\n    color: '#91e5f6',\n    fontWeight: '400',\n    fontSize: 12,\n  },\n});\n\nexport default ScreenHeader;\n","import React, {useState} from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface ButtonProps {\n  cta: string;\n  onPress(): void;\n}\n\nconst Button = (props: ButtonProps) => {\n  const {cta, onPress} = props;\n\n  const [isPressedIn, setIsPressedIn] = useState(false);\n\n  return (\n    <Pressable\n      onPress={onPress}\n      onPressIn={() => setIsPressedIn(true)}\n      onPressOut={() => setIsPressedIn(false)}>\n      <View style={[styles.button, isPressedIn && styles.active]}>\n        <Text style={styles.cta}>{cta}</Text>\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: '#fff',\n  },\n  cta: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  active: {\n    elevation: 2,\n  },\n});\n\nexport default Button;\n","import React from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface KeyboardProps {\n  onKeyPress(char: string): void;\n  disabledKeyList: string[];\n}\n\nconst keySequence = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  ['delete', 'guess'],\n];\n\nconst Keyboard = (props: KeyboardProps) => {\n  const {onKeyPress, disabledKeyList} = props;\n\n  return (\n    <>\n      {keySequence.map((row, rowIndex) => {\n        return (\n          <View key={'key-row-' + rowIndex} style={styles.row}>\n            {row.map(key => {\n              const isDisabled = disabledKeyList.includes(key);\n              return (\n                <Pressable\n                  key={key}\n                  disabled={isDisabled}\n                  onPress={() => onKeyPress(key)}>\n                  <View\n                    style={[styles.cell, isDisabled && styles.cellDisabled]}>\n                    <Text\n                      style={[styles.text, isDisabled && styles.textDisabled]}>\n                      {key}\n                    </Text>\n                  </View>\n                </Pressable>\n              );\n            })}\n          </View>\n        );\n      })}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5,\n  },\n  cell: {\n    padding: 5,\n    paddingHorizontal: 8,\n    margin: 4,\n    borderRadius: 2,\n    borderWidth: 1,\n    borderColor: 'white',\n  },\n  cellDisabled: {\n    borderColor: 'grey',\n  },\n  text: {\n    color: 'white',\n    fontSize: 16,\n  },\n  textDisabled: {\n    color: 'grey',\n  },\n});\n\nexport default Keyboard;\n","import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {StyleSheet, Text, View, Clipboard} from 'react-native';\nimport Button from './components/Button';\nimport Keyboard from './components/Keyboard';\nimport TextBlock, {TextBlockState} from './components/TextBlock';\nimport {MAX_GUESSES, MAX_WORD_LEN} from './constants/gameConstants';\nimport {getInitialBoard, getRandomWord, getWordleEmoji} from './gameUtils';\n\nconst BOARD_TEMPLATE = getInitialBoard();\n\nconst GameScreen = () => {\n  const [guessList, setGuessList] = useState<string[]>([]);\n  const [inputWord, setInputWord] = useState<string>('');\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [disabledLetters, setDisabledLetters] = useState<string[]>([]);\n\n  const wordToGuess = useRef<string>('xxxxx');\n\n  useEffect(() => {\n    if (gameOver === false) {\n      wordToGuess.current = getRandomWord();\n      setInputWord('');\n      setGuessList([]);\n    }\n  }, [gameOver]);\n\n  useEffect(() => {\n    const guessLen = guessList.length;\n    if (guessList[guessLen - 1] === wordToGuess.current) {\n      setGameOver(true);\n    } else if (guessLen === MAX_GUESSES) {\n      setGameOver(true);\n    }\n  }, [guessList]);\n\n  useEffect(() => {\n    const list: string[] = [];\n\n    guessList.forEach(word => {\n      word.split('').forEach(letter => {\n        console.log({letter});\n        if (!wordToGuess.current.includes(letter)) {\n          list.push(letter);\n        }\n      });\n    });\n\n    setDisabledLetters(list);\n  }, [guessList]);\n\n  const onKeyPress = useCallback(\n    (key: string) => {\n      if (key === 'delete') {\n        setInputWord(prev => prev.slice(0, -1));\n      } else if (key === 'guess') {\n        setGuessList(prev => [...prev, inputWord.toUpperCase()]);\n        setInputWord('');\n      } else if (key.length === 1) {\n        setInputWord(prev => {\n          if (prev.length < MAX_WORD_LEN) {\n            return prev + key;\n          }\n          return prev;\n        });\n      }\n    },\n    [inputWord],\n  );\n\n  const wordleEmoji: string = useMemo(() => {\n    if (!gameOver) {\n      return '';\n    }\n\n    return getWordleEmoji(wordToGuess.current, guessList);\n  }, [gameOver, guessList]);\n\n  return (\n    <View style={styles.fg1}>\n      {BOARD_TEMPLATE.map((row, rowIndex) => {\n        return (\n          <View key={`row-${rowIndex}`} style={styles.row}>\n            {row.map((_, colIndex) => {\n              const guessLetter = guessList[rowIndex]?.[colIndex];\n              let state: TextBlockState = TextBlockState.GUESS;\n\n              if (guessLetter === undefined) {\n                state = TextBlockState.GUESS;\n              } else if (guessLetter === wordToGuess.current[colIndex]) {\n                state = TextBlockState.CORRECT;\n              } else if (wordToGuess.current.includes(guessLetter)) {\n                state = TextBlockState.POSSIBLE;\n              } else {\n                state = TextBlockState.INCORRECT;\n              }\n\n              const letterToShow =\n                rowIndex === guessList.length\n                  ? inputWord[colIndex]\n                  : guessLetter;\n\n              return (\n                <View style={styles.mh2} key={`col-${colIndex}`}>\n                  <TextBlock text={letterToShow || ''} state={state} />\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n\n      <View style={styles.bottomContainer}>\n        {gameOver ? (\n          <>\n            <Text style={[styles.textWhite, styles.mb12]}>Game Over!</Text>\n            <Text style={[styles.textWhite, styles.mb12]}>\n              The word was : {wordToGuess.current}\n            </Text>\n\n            <Text style={styles.textWhite} selectable>\n              {wordleEmoji}\n            </Text>\n\n            <View style={styles.buttonRow}>\n              <Button\n                cta=\"Copy Score\"\n                onPress={() => Clipboard.setString(wordleEmoji)}\n              />\n              <View style={styles.buttonSpacer} />\n              <Button cta=\"Play Again\" onPress={() => setGameOver(false)} />\n            </View>\n          </>\n        ) : (\n          <Keyboard\n            disabledKeyList={[\n              ...disabledLetters,\n              inputWord.length !== 5 ? 'guess' : '',\n            ]}\n            onKeyPress={onKeyPress}\n          />\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  mb12: {\n    marginBottom: 12,\n  },\n  mh2: {\n    marginHorizontal: 2,\n  },\n  fg1: {\n    flexGrow: 1,\n  },\n  textWhite: {\n    color: '#fff',\n    fontSize: 22,\n  },\n  row: {\n    marginBottom: 4,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  bottomContainer: {\n    flexGrow: 1,\n    marginBottom: 16,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  score: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 12,\n  },\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  buttonSpacer: {\n    width: 12,\n  },\n});\n\nexport default GameScreen;\n","import fiveLetterWords from './constants/fiveLetterWords.json';\nimport {MAX_GUESSES} from './constants/gameConstants';\n\nexport const getInitialBoard = (): string[][] => {\n  const board: string[][] = [];\n  for (let i = 0; i < 6; i++) {\n    board.push(new Array(5).fill(''));\n  }\n\n  return board;\n};\n\nexport const getRandomWord = (): string => {\n  const len = fiveLetterWords.length;\n  const randomIndex = Math.floor(Math.random() * 100000) % len;\n  return fiveLetterWords[randomIndex].toUpperCase();\n};\n\nexport const getWordleEmoji = (word: string, guessList: string[]): string => {\n  const hasWon = guessList[guessList.length - 1] === word;\n\n  let output = `Wordle ${hasWon ? guessList.length : 'x'}/${MAX_GUESSES}\\n\\n`;\n\n  guessList.forEach(row => {\n    let line = '';\n\n    row.split('').forEach((char, colIndex) => {\n      if (char === word[colIndex]) {\n        line += '🟩';\n      } else if (word.includes(char)) {\n        line += '🟨';\n      } else {\n        line += '⬜️';\n      }\n    });\n\n    output += line + '\\n';\n  });\n\n  return output;\n};\n","export const MAX_GUESSES = 6;\nexport const MAX_WORD_LEN = 5;\n","import React from 'react';\nimport {SafeAreaView, StyleSheet, View} from 'react-native';\nimport SourceLink from './app/components/SourceLink';\nimport ScreenHeader from './app/components/ScreenHeader';\nimport GameScreen from './app/GameScreen';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SafeAreaView style={styles.container}>\n        <ScreenHeader />\n        <GameScreen />\n        <SourceLink />\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n});\n"],"sourceRoot":""}